/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tp1.ejercicio6;

/**
 *
 * @author Usuario
 */
public class NewClass {
  //  6. AnÃ¡lisis de las estructuras de listas provistas por la API de Java.  
  //a. Â¿En quÃ© casos ArrayList ofrece un mejor rendimiento que LinkedList? 
  //b. Â¿CuÃ¡ndo LinkedList puede ser mÃ¡s eficiente que ArrayList? 
  //c. Â¿QuÃ© diferencia encuentra en el uso de la memoria en ArrayList y LinkedList? 
  //d. Â¿En quÃ© casos serÃ­a preferible usar un ArrayList o un LinkedList? 
  
  //a. En resumen, ArrayList es mejor cuando se 
  //necesita acceso rÃ¡pido a los elementos y 
  //cuando las modificaciones son principalmente 
  //al final de la lista.
    
  //b.Cuando el tamaÃ±o de la lista cambia constantemente
  //Cuando se usa como una cola o una pila
  //Cuando se usan muchas operaciones de eliminaciÃ³n
  //Inserciones y eliminaciones frecuentes en posiciones
  //intermedias o al inicio
    
  /*c.Si la 
    memoria es un factor crÃ­tico y no
    se requieren muchas inserciones o 
    eliminaciones en posiciones
    intermedias, ArrayList es la mejor opciÃ³n.
    Por otro lado, si se requiere insertar o eliminar 
    elementos con frecuencia en cualquier parte de
    la lista, LinkedList puede ser mÃ¡s 
    conveniente a pesar del mayor uso de memoria.
    
    ArrayList es mÃ¡s eficiente en memoria
    porque solo almacena los datos sin 
    referencias adicionales.

    LinkedList usa mÃ¡s memoria debido
    a los punteros adicionales en cada nodo,
    lo que puede ser un problema si se almacenan 
    muchos elementos.

    
    d.CuÃ¡ndo usar ArrayList
âœ… Acceso rÃ¡pido a elementos por Ã­ndice (O(1))
âœ… Lectura frecuente de datos sin muchas modificaciones
âœ… Menor consumo de memoria por elemento
âœ… IteraciÃ³n rÃ¡pida gracias a la localizaciÃ³n en cachÃ©
âœ… Cuando las inserciones y eliminaciones ocurren al final de la lista
    
    
    ğŸ“Œ CuÃ¡ndo usar LinkedList
âœ… Inserciones y eliminaciones frecuentes en posiciones intermedias o al inicio (O(1))
âœ… Cuando se requiere implementar una estructura de datos como una cola o pila
âœ… Cuando el tamaÃ±o de la lista cambia constantemente
âœ… Cuando no es necesario acceder por Ã­ndice con frecuencia (O(n))
    
    */
}
